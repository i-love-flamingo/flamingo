// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	testing "testing"

	mock "github.com/stretchr/testify/mock"

	voter "flamingo.me/flamingo/v3/core/security/application/voter"
)

// SecurityVoter is an autogenerated mock type for the SecurityVoter type
type SecurityVoter struct {
	mock.Mock
}

// Vote provides a mock function with given fields: allAssignedPermissions, desiredPermission, forObject
func (_m *SecurityVoter) Vote(allAssignedPermissions []string, desiredPermission string, forObject interface{}) voter.AccessDecision {
	ret := _m.Called(allAssignedPermissions, desiredPermission, forObject)

	var r0 voter.AccessDecision
	if rf, ok := ret.Get(0).(func([]string, string, interface{}) voter.AccessDecision); ok {
		r0 = rf(allAssignedPermissions, desiredPermission, forObject)
	} else {
		r0 = ret.Get(0).(voter.AccessDecision)
	}

	return r0
}

// NewSecurityVoter creates a new instance of SecurityVoter. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewSecurityVoter(t testing.TB) *SecurityVoter {
	mock := &SecurityVoter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
