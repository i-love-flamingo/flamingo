// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"flamingo.me/flamingo/v3/framework/web"
	mock "github.com/stretchr/testify/mock"
)

// NewSecurityService creates a new instance of SecurityService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSecurityService(t interface {
	mock.TestingT
	Cleanup(func())
}) *SecurityService {
	mock := &SecurityService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// SecurityService is an autogenerated mock type for the SecurityService type
type SecurityService struct {
	mock.Mock
}

type SecurityService_Expecter struct {
	mock *mock.Mock
}

func (_m *SecurityService) EXPECT() *SecurityService_Expecter {
	return &SecurityService_Expecter{mock: &_m.Mock}
}

// IsGranted provides a mock function for the type SecurityService
func (_mock *SecurityService) IsGranted(context1 context.Context, session *web.Session, s string, ifaceVal interface{}) bool {
	ret := _mock.Called(context1, session, s, ifaceVal)

	if len(ret) == 0 {
		panic("no return value specified for IsGranted")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(context.Context, *web.Session, string, interface{}) bool); ok {
		r0 = returnFunc(context1, session, s, ifaceVal)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// SecurityService_IsGranted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsGranted'
type SecurityService_IsGranted_Call struct {
	*mock.Call
}

// IsGranted is a helper method to define mock.On call
//   - context1 context.Context
//   - session *web.Session
//   - s string
//   - ifaceVal interface{}
func (_e *SecurityService_Expecter) IsGranted(context1 interface{}, session interface{}, s interface{}, ifaceVal interface{}) *SecurityService_IsGranted_Call {
	return &SecurityService_IsGranted_Call{Call: _e.mock.On("IsGranted", context1, session, s, ifaceVal)}
}

func (_c *SecurityService_IsGranted_Call) Run(run func(context1 context.Context, session *web.Session, s string, ifaceVal interface{})) *SecurityService_IsGranted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *web.Session
		if args[1] != nil {
			arg1 = args[1].(*web.Session)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 interface{}
		if args[3] != nil {
			arg3 = args[3].(interface{})
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *SecurityService_IsGranted_Call) Return(b bool) *SecurityService_IsGranted_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *SecurityService_IsGranted_Call) RunAndReturn(run func(context1 context.Context, session *web.Session, s string, ifaceVal interface{}) bool) *SecurityService_IsGranted_Call {
	_c.Call.Return(run)
	return _c
}

// IsLoggedIn provides a mock function for the type SecurityService
func (_mock *SecurityService) IsLoggedIn(context1 context.Context, session *web.Session) bool {
	ret := _mock.Called(context1, session)

	if len(ret) == 0 {
		panic("no return value specified for IsLoggedIn")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(context.Context, *web.Session) bool); ok {
		r0 = returnFunc(context1, session)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// SecurityService_IsLoggedIn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsLoggedIn'
type SecurityService_IsLoggedIn_Call struct {
	*mock.Call
}

// IsLoggedIn is a helper method to define mock.On call
//   - context1 context.Context
//   - session *web.Session
func (_e *SecurityService_Expecter) IsLoggedIn(context1 interface{}, session interface{}) *SecurityService_IsLoggedIn_Call {
	return &SecurityService_IsLoggedIn_Call{Call: _e.mock.On("IsLoggedIn", context1, session)}
}

func (_c *SecurityService_IsLoggedIn_Call) Run(run func(context1 context.Context, session *web.Session)) *SecurityService_IsLoggedIn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *web.Session
		if args[1] != nil {
			arg1 = args[1].(*web.Session)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *SecurityService_IsLoggedIn_Call) Return(b bool) *SecurityService_IsLoggedIn_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *SecurityService_IsLoggedIn_Call) RunAndReturn(run func(context1 context.Context, session *web.Session) bool) *SecurityService_IsLoggedIn_Call {
	_c.Call.Return(run)
	return _c
}

// IsLoggedOut provides a mock function for the type SecurityService
func (_mock *SecurityService) IsLoggedOut(context1 context.Context, session *web.Session) bool {
	ret := _mock.Called(context1, session)

	if len(ret) == 0 {
		panic("no return value specified for IsLoggedOut")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(context.Context, *web.Session) bool); ok {
		r0 = returnFunc(context1, session)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// SecurityService_IsLoggedOut_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsLoggedOut'
type SecurityService_IsLoggedOut_Call struct {
	*mock.Call
}

// IsLoggedOut is a helper method to define mock.On call
//   - context1 context.Context
//   - session *web.Session
func (_e *SecurityService_Expecter) IsLoggedOut(context1 interface{}, session interface{}) *SecurityService_IsLoggedOut_Call {
	return &SecurityService_IsLoggedOut_Call{Call: _e.mock.On("IsLoggedOut", context1, session)}
}

func (_c *SecurityService_IsLoggedOut_Call) Run(run func(context1 context.Context, session *web.Session)) *SecurityService_IsLoggedOut_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *web.Session
		if args[1] != nil {
			arg1 = args[1].(*web.Session)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *SecurityService_IsLoggedOut_Call) Return(b bool) *SecurityService_IsLoggedOut_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *SecurityService_IsLoggedOut_Call) RunAndReturn(run func(context1 context.Context, session *web.Session) bool) *SecurityService_IsLoggedOut_Call {
	_c.Call.Return(run)
	return _c
}
