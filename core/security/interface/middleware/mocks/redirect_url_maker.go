// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"net/url"

	mock "github.com/stretchr/testify/mock"
)

// NewRedirectURLMaker creates a new instance of RedirectURLMaker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRedirectURLMaker(t interface {
	mock.TestingT
	Cleanup(func())
}) *RedirectURLMaker {
	mock := &RedirectURLMaker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// RedirectURLMaker is an autogenerated mock type for the RedirectURLMaker type
type RedirectURLMaker struct {
	mock.Mock
}

type RedirectURLMaker_Expecter struct {
	mock *mock.Mock
}

func (_m *RedirectURLMaker) EXPECT() *RedirectURLMaker_Expecter {
	return &RedirectURLMaker_Expecter{mock: &_m.Mock}
}

// URL provides a mock function for the type RedirectURLMaker
func (_mock *RedirectURLMaker) URL(context1 context.Context, s string) (*url.URL, error) {
	ret := _mock.Called(context1, s)

	if len(ret) == 0 {
		panic("no return value specified for URL")
	}

	var r0 *url.URL
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*url.URL, error)); ok {
		return returnFunc(context1, s)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *url.URL); ok {
		r0 = returnFunc(context1, s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*url.URL)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(context1, s)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// RedirectURLMaker_URL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'URL'
type RedirectURLMaker_URL_Call struct {
	*mock.Call
}

// URL is a helper method to define mock.On call
//   - context1 context.Context
//   - s string
func (_e *RedirectURLMaker_Expecter) URL(context1 interface{}, s interface{}) *RedirectURLMaker_URL_Call {
	return &RedirectURLMaker_URL_Call{Call: _e.mock.On("URL", context1, s)}
}

func (_c *RedirectURLMaker_URL_Call) Run(run func(context1 context.Context, s string)) *RedirectURLMaker_URL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *RedirectURLMaker_URL_Call) Return(uRL *url.URL, err error) *RedirectURLMaker_URL_Call {
	_c.Call.Return(uRL, err)
	return _c
}

func (_c *RedirectURLMaker_URL_Call) RunAndReturn(run func(context1 context.Context, s string) (*url.URL, error)) *RedirectURLMaker_URL_Call {
	_c.Call.Return(run)
	return _c
}
