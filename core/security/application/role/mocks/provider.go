// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"flamingo.me/flamingo/v3/core/security/domain"
	"flamingo.me/flamingo/v3/framework/web"
	mock "github.com/stretchr/testify/mock"
)

// NewProvider creates a new instance of Provider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *Provider {
	mock := &Provider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Provider is an autogenerated mock type for the Provider type
type Provider struct {
	mock.Mock
}

type Provider_Expecter struct {
	mock *mock.Mock
}

func (_m *Provider) EXPECT() *Provider_Expecter {
	return &Provider_Expecter{mock: &_m.Mock}
}

// All provides a mock function for the type Provider
func (_mock *Provider) All(context1 context.Context, session *web.Session) []domain.Role {
	ret := _mock.Called(context1, session)

	if len(ret) == 0 {
		panic("no return value specified for All")
	}

	var r0 []domain.Role
	if returnFunc, ok := ret.Get(0).(func(context.Context, *web.Session) []domain.Role); ok {
		r0 = returnFunc(context1, session)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Role)
		}
	}
	return r0
}

// Provider_All_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'All'
type Provider_All_Call struct {
	*mock.Call
}

// All is a helper method to define mock.On call
//   - context1 context.Context
//   - session *web.Session
func (_e *Provider_Expecter) All(context1 interface{}, session interface{}) *Provider_All_Call {
	return &Provider_All_Call{Call: _e.mock.On("All", context1, session)}
}

func (_c *Provider_All_Call) Run(run func(context1 context.Context, session *web.Session)) *Provider_All_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *web.Session
		if args[1] != nil {
			arg1 = args[1].(*web.Session)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Provider_All_Call) Return(roles []domain.Role) *Provider_All_Call {
	_c.Call.Return(roles)
	return _c
}

func (_c *Provider_All_Call) RunAndReturn(run func(context1 context.Context, session *web.Session) []domain.Role) *Provider_All_Call {
	_c.Call.Return(run)
	return _c
}
