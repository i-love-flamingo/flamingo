// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	context "context"

	web "flamingo.me/flamingo/v3/framework/web"
	mock "github.com/stretchr/testify/mock"
)

// SecurityService is an autogenerated mock type for the SecurityService type
type SecurityService struct {
	mock.Mock
}

type SecurityService_Expecter struct {
	mock *mock.Mock
}

func (_m *SecurityService) EXPECT() *SecurityService_Expecter {
	return &SecurityService_Expecter{mock: &_m.Mock}
}

// IsGranted provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *SecurityService) IsGranted(_a0 context.Context, _a1 *web.Session, _a2 string, _a3 interface{}) bool {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *web.Session, string, interface{}) bool); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SecurityService_IsGranted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsGranted'
type SecurityService_IsGranted_Call struct {
	*mock.Call
}

// IsGranted is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *web.Session
//   - _a2 string
//   - _a3 interface{}
func (_e *SecurityService_Expecter) IsGranted(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 interface{}) *SecurityService_IsGranted_Call {
	return &SecurityService_IsGranted_Call{Call: _e.mock.On("IsGranted", _a0, _a1, _a2, _a3)}
}

func (_c *SecurityService_IsGranted_Call) Run(run func(_a0 context.Context, _a1 *web.Session, _a2 string, _a3 interface{})) *SecurityService_IsGranted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*web.Session), args[2].(string), args[3].(interface{}))
	})
	return _c
}

func (_c *SecurityService_IsGranted_Call) Return(_a0 bool) *SecurityService_IsGranted_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SecurityService_IsGranted_Call) RunAndReturn(run func(context.Context, *web.Session, string, interface{}) bool) *SecurityService_IsGranted_Call {
	_c.Call.Return(run)
	return _c
}

// IsLoggedIn provides a mock function with given fields: _a0, _a1
func (_m *SecurityService) IsLoggedIn(_a0 context.Context, _a1 *web.Session) bool {
	ret := _m.Called(_a0, _a1)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *web.Session) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SecurityService_IsLoggedIn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsLoggedIn'
type SecurityService_IsLoggedIn_Call struct {
	*mock.Call
}

// IsLoggedIn is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *web.Session
func (_e *SecurityService_Expecter) IsLoggedIn(_a0 interface{}, _a1 interface{}) *SecurityService_IsLoggedIn_Call {
	return &SecurityService_IsLoggedIn_Call{Call: _e.mock.On("IsLoggedIn", _a0, _a1)}
}

func (_c *SecurityService_IsLoggedIn_Call) Run(run func(_a0 context.Context, _a1 *web.Session)) *SecurityService_IsLoggedIn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*web.Session))
	})
	return _c
}

func (_c *SecurityService_IsLoggedIn_Call) Return(_a0 bool) *SecurityService_IsLoggedIn_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SecurityService_IsLoggedIn_Call) RunAndReturn(run func(context.Context, *web.Session) bool) *SecurityService_IsLoggedIn_Call {
	_c.Call.Return(run)
	return _c
}

// IsLoggedOut provides a mock function with given fields: _a0, _a1
func (_m *SecurityService) IsLoggedOut(_a0 context.Context, _a1 *web.Session) bool {
	ret := _m.Called(_a0, _a1)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *web.Session) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SecurityService_IsLoggedOut_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsLoggedOut'
type SecurityService_IsLoggedOut_Call struct {
	*mock.Call
}

// IsLoggedOut is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *web.Session
func (_e *SecurityService_Expecter) IsLoggedOut(_a0 interface{}, _a1 interface{}) *SecurityService_IsLoggedOut_Call {
	return &SecurityService_IsLoggedOut_Call{Call: _e.mock.On("IsLoggedOut", _a0, _a1)}
}

func (_c *SecurityService_IsLoggedOut_Call) Run(run func(_a0 context.Context, _a1 *web.Session)) *SecurityService_IsLoggedOut_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*web.Session))
	})
	return _c
}

func (_c *SecurityService_IsLoggedOut_Call) Return(_a0 bool) *SecurityService_IsLoggedOut_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SecurityService_IsLoggedOut_Call) RunAndReturn(run func(context.Context, *web.Session) bool) *SecurityService_IsLoggedOut_Call {
	_c.Call.Return(run)
	return _c
}

// NewSecurityService creates a new instance of SecurityService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSecurityService(t interface {
	mock.TestingT
	Cleanup(func())
}) *SecurityService {
	mock := &SecurityService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
